// Generated by CoffeeScript 1.3.3
var addressBar, createNavigatorElement, createTab, createTabIframe, existsTab, getTabIframe, getTabNavigator, guid, logMessage, navigateToRandomTab, selectTab, setUrl, socket, tabElementSelected, tabSelected, updateContext, userId;

socket = io.connect('/client');

guid = function() {
  var S4;
  S4 = function() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
  };
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
};

userId = guid();

tabSelected = null;

tabElementSelected = null;

setUrl = function(url) {
  return socket.emit('navigate', tabSelected, url);
};

socket.on('session-changed', function(tab_id, context) {
  console.log('session changed', tab_id, context);
  tabStore[tab_id] = context;
  getTabNavigator(tab_id).textContent = context.title;
  if (tabSelected === tab_id) {
    return updateContext(context);
  }
});

socket.on('status-changed', function(tab_id, msg) {
  if (tabSelected !== tab_id) {
    return;
  }
  return $("#status").html(msg || "");
});

existsTab = function(id) {
  return !!getTabIframe(id);
};

socket.on('tab-created', function(id, forceNavigate) {
  if (!existsTab(id)) {
    createTabIframe(id);
    return createNavigatorElement(id, "about:blank");
  }
});

socket.on('tab-destroyed', function() {});

updateContext = function(_arg) {
  var hasNextEntries, hasPreviousEntries, title, url;
  url = _arg.url, title = _arg.title, hasNextEntries = _arg.hasNextEntries, hasPreviousEntries = _arg.hasPreviousEntries;
  console.log("updating context");
  $("#addressBar").val(url);
  if (hasPreviousEntries) {
    $("#back").removeAttr("disabled");
  } else {
    $("#back").attr("disabled", "disabled");
  }
  if (hasNextEntries) {
    return $("#forward").removeAttr("disabled");
  } else {
    return $("#forward").attr("disabled", "disabled");
  }
};

logMessage = function(message) {
  var logDiv, messageElement;
  logDiv = document.getElementById("log");
  messageElement = document.createElement('p');
  messageElement.innerText = message;
  return logDiv.appendChild(messageElement);
};

socket.on('log', function(message) {
  return logMessage(message);
});

getTabIframe = function(id) {
  return document.getElementById("tab-" + id);
};

getTabNavigator = function(id) {
  return document.getElementById("navigator-" + id);
};

selectTab = function(id) {
  var navigator, tab;
  tab = getTabIframe(id);
  $(".tab-navigator").removeClass("selected");
  $(".tab").hide();
  $(tab).show();
  tabSelected = id;
  tabElementSelected = tab;
  navigator = $("#navigator-" + id)[0];
  navigator.classList.add("selected");
  navigator.textContent = tabStore[id].title || "about:blank";
  $("#tab-id").html(id);
  return updateContext(tabStore[id]);
};

createTabIframe = function(id) {
  var iframe, tabContainer;
  iframe = document.createElement("iframe");
  iframe.src = "/tab?id=" + id + "&userId=" + userId;
  iframe.id = "tab-" + id;
  iframe.className = "tab";
  tabContainer = document.getElementById("tab-container");
  return tabContainer.appendChild(iframe);
};

createNavigatorElement = function(id, title) {
  var navigatorElement;
  navigatorElement = document.createElement("li");
  navigatorElement.id = "navigator-" + id;
  navigatorElement.className = "tab-navigator";
  $(navigatorElement).click(function() {
    return selectTab(id);
  });
  return $("#tab-navigator").append(navigatorElement);
};

addressBar = null;

navigateToRandomTab = function() {
  var k, v;
  for (k in tabStore) {
    v = tabStore[k];
    selectTab(k);
    return;
  }
};

createTab = function(url) {
  if (url == null) {
    url = "http://news.ycombinator.com";
  }
  return $.getJSON("/create_tab", {
    url: url,
    userId: userId
  }, function(_arg) {
    var id;
    id = _arg.id;
    createTabIframe(id);
    createNavigatorElement(id);
    return selectTab(id);
  });
};

window.onload = function() {
  var address, hasTabs, id, title, _ref;
  hasTabs = false;
  for (id in tabStore) {
    _ref = tabStore[id], address = _ref.address, title = _ref.title;
    hasTabs = true;
    createTabIframe(id);
    createNavigatorElement(id, title);
    if (!tabSelected) {
      selectTab(id);
    }
  }
  if (!hasTabs) {
    createTab();
  }
  $("#addressBar").keypress(function(_arg) {
    var which;
    which = _arg.which;
    if (which === 13) {
      return setUrl(this.value);
    }
  });
  $("#create-tab").click(function(evt) {
    return createTab();
  });
  $("#destroy-tab").click(function(evt) {
    if (tabSelected) {
      return $.get("/destroy_tab", {
        id: tabSelected
      }, function() {
        var navigator;
        tabElementSelected.parentNode.removeChild(tabElementSelected);
        navigator = getTabNavigator(tabSelected);
        navigator.parentNode.removeChild(navigator);
        delete tabStore[tabSelected];
        tabSelected = null;
        tabElementSelected = null;
        return navigateToRandomTab();
      });
    }
  });
  $("#back").click(function(evt) {
    return socket.emit('back', tabSelected);
  });
  $("#forward").click(function(evt) {
    return socket.emit('forward', tabSelected);
  });
  $("#reload").click(function(evt) {
    return socket.emit('reload', tabSelected);
  });
  return $("#open-tab").click(function(evt) {
    return window.open("/tab?id=" + tabSelected);
  });
};
